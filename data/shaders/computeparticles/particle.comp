#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Particle
{
	vec2 pos;
	vec2 vel;
};

// LOOK: These bindings correspond to the DescriptorSetLayouts and
// the DescriptorSets from prepareCompute()!

// Binding 0 : Particle storage buffer (read)
layout(std140, binding = 0) buffer ParticlesA
{
   Particle particlesA[ ];
};

// Binding 1 : Particle storage buffer (write)
layout(std140, binding = 1) buffer ParticlesB
{
   Particle particlesB[ ];
};

layout (local_size_x = 16, local_size_y = 16) in;

// LOOK: rule weights and distances, as well as particle count, based off uniforms.
// The deltaT here has to be updated every frame to account for changes in
// frame rate.
layout (binding = 2) uniform UBO
{
	float deltaT;
	float rule1Distance;
	float rule2Distance;
	float rule3Distance;
	float rule1Scale;
	float rule2Scale;
	float rule3Scale;
	int particleCount;
} ubo;

vec2 computeVelocityChange(int N, uint iSelf)
{    
    vec2 sumCOM     = vec2(0.0, 0.0);
	vec2 sumDelta   = vec2(0.0, 0.0);
	vec2 sumVel     = vec2(0.0, 0.0);
	int numBoidsRule[2] = { 0, 0 };
	for (int boidIdx = 0; boidIdx < N; ++boidIdx)
	{
		if (boidIdx == iSelf)
			continue;

        vec2 vOffset = particlesA[iSelf].pos - particlesA[boidIdx].pos;
		const float distance = sqrt( dot(vOffset, vOffset) );

		// Rule 1: boids fly towards their local perceived center of mass, which excludes themselves
		if (distance < ubo.rule1Distance)
		{
			sumCOM += particlesA[boidIdx].pos;
			++numBoidsRule[0];
		}

		// Rule 2: boids try to stay a distance d away from each other
		if (distance < ubo.rule2Distance)
		{
			sumDelta += vOffset;
		}

		// Rule 3: boids try to match the speed of surrounding boids
		if (distance < ubo.rule3Distance)
		{
			sumVel += particlesA[boidIdx].vel;
			++numBoidsRule[1];
		}
	}

	vec2 totalVel  = vec2(0.0f, 0.0f);
	if (numBoidsRule[0] > 0) {
        totalVel	+= (sumCOM / float(numBoidsRule[0]) - particlesA[iSelf].pos) * ubo.rule1Scale;
    }
	totalVel	+= sumDelta * ubo.rule2Scale;
	if (numBoidsRule[1] > 0) {
        totalVel	+= sumVel * ubo.rule3Scale;
    }
    
    return totalVel;
}


void main()
{
    // Current SSBO index
    const uint iSelf = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (iSelf >= ubo.particleCount) {
		return;
    }

    vec2 vNewVel = computeVelocityChange(ubo.particleCount, gl_GlobalInvocationID.x);

	// clamp velocity for a more pleasing simulation.
	vNewVel = normalize(vNewVel) * clamp(length(vNewVel), 0.0, 0.1);

	// kinematic update
	vec2 vPos = particlesA[iSelf].pos.xy + vNewVel * ubo.deltaT;

    // Wrap around boundary
	if (vPos.x < -1.0) vPos.x = 1.0;
	if (vPos.x > 1.0) vPos.x = -1.0;
	if (vPos.y < -1.0) vPos.y = 1.0;
	if (vPos.y > 1.0) vPos.y = -1.0;

    // Write back
    particlesB[iSelf].pos.xy = vPos;
    particlesB[iSelf].vel.xy = vNewVel;
}